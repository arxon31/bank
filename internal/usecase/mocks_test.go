// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	entity "github.com/arxon31/bank/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// MakeTransaction mocks base method.
func (m *MockTransaction) MakeTransaction(ctx context.Context, transaction entity.Transaction) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeTransaction", ctx, transaction)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeTransaction indicates an expected call of MakeTransaction.
func (mr *MockTransactionMockRecorder) MakeTransaction(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeTransaction", reflect.TypeOf((*MockTransaction)(nil).MakeTransaction), ctx, transaction)
}

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// Store mocks base method.
func (m *MockTransactionRepository) Store(ctx context.Context, transaction entity.Transaction) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, transaction)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockTransactionRepositoryMockRecorder) Store(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockTransactionRepository)(nil).Store), ctx, transaction)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// GetUserAmount mocks base method.
func (m *MockUserRepository) GetUserAmount(ctx context.Context, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAmount", ctx, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAmount indicates an expected call of GetUserAmount.
func (mr *MockUserRepositoryMockRecorder) GetUserAmount(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAmount", reflect.TypeOf((*MockUserRepository)(nil).GetUserAmount), ctx, userID)
}

// UpdateUserAmount mocks base method.
func (m *MockUserRepository) UpdateUserAmount(ctx context.Context, userID, amount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserAmount", ctx, userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserAmount indicates an expected call of UpdateUserAmount.
func (mr *MockUserRepositoryMockRecorder) UpdateUserAmount(ctx, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAmount", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserAmount), ctx, userID, amount)
}
